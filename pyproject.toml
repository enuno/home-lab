# Python Project Configuration for Home Lab Infrastructure
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/

[project]
name = "homelab-infrastructure"
version = "0.1.0"
description = "Home lab infrastructure automation and tooling"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Home Lab Admin", email = "admin@homelab.local" }
]
keywords = ["homelab", "infrastructure", "automation", "ansible", "terraform"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "ansible-core>=2.19.3",
    "ansible>=12.1.0",
    "boto3>=1.34.0",
    "google-cloud-compute>=1.18.0",
    "kubernetes>=29.0.0",
    "paramiko>=3.4.0",
    "pyyaml>=6.0.1",
    "requests>=2.31.0",
    "jinja2>=3.1.3",
]

[project.optional-dependencies]
dev = [
    "black>=24.2.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pre-commit>=3.6.0",
]

# Build system
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Black Configuration
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Default excludes
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  
  # Additional excludes
  | \.terraform
  | node_modules
  | venv
)/
'''

# Ruff Configuration
# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
line-length = 100
target-version = "py311"

# Exclude patterns
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
    ".terraform",
    "node_modules",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "PERF",   # Perflint
    "RUF",    # Ruff-specific rules
]

# Disable specific rules
ignore = [
    "E501",    # Line too long (handled by Black)
    "S101",    # Use of assert (common in tests)
    "S603",    # subprocess without shell=True (we need this for automation)
    "S607",    # Starting a process with a partial path (common in scripts)
    "PLR0913", # Too many arguments to function call
    "TRY003",  # Avoid specifying long messages outside exception class
    "COM812",  # Trailing comma missing (conflicts with Black)
    "ISC001",  # Single line implicit string concatenation (conflicts with formatter)
]

# Allow fix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Scripts can print and use subprocess
"scripts/**/*" = ["T20", "S603", "S607"]
# __init__.py can have unused imports
"__init__.py" = ["F401"]

[tool.ruff.lint.mccabe]
# Maximum complexity
max-complexity = 15

[tool.ruff.lint.isort]
# Import sorting configuration
force-single-line = false
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = ["homelab"]
known-third-party = ["ansible", "boto3", "google", "kubernetes"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 75

# Mypy Configuration
# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxed for home lab
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "ansible.*",
    "boto3.*",
    "botocore.*",
    "google.*",
    "kubernetes.*",
]
ignore_missing_imports = true

# Pytest Configuration
# https://docs.pytest.org/en/stable/reference/customize.html
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=homelab",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "aws: marks tests that require AWS credentials",
    "gcp: marks tests that require GCP credentials",
]

# Coverage Configuration
# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = ["homelab"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
