---
# K3s Cluster Deployment Playbook
# Deploys a production-ready K3s Kubernetes cluster with HA masters and workers
# https://docs.k3s.io/installation/ha

- name: Pre-flight checks for K3s cluster deployment
  hosts: k3s_cluster
  gather_facts: true
  become: true
  tags: [preflight]

  tasks:
    - name: Check minimum system requirements
      ansible.builtin.assert:
        that:
          - ansible_memtotal_mb >= 1024
          - ansible_architecture in ['x86_64', 'aarch64', 'arm64']
        fail_msg: "System does not meet minimum requirements (1GB RAM, x86_64/ARM64 architecture)"
        success_msg: "System meets minimum requirements"

    - name: Check operating system compatibility
      ansible.builtin.assert:
        that:
          - ansible_os_family in ['Debian', 'RedHat', 'Suse', 'Archlinux']
        fail_msg: "Unsupported OS family: {{ ansible_os_family }}"
        success_msg: "Operating system is compatible"

    - name: Check network connectivity between nodes
      ansible.builtin.wait_for:
        host: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
        port: 22
        timeout: 10
      loop: "{{ groups['k3s_cluster'] }}"
      when: item != inventory_hostname

- name: Deploy K3s master nodes (HA setup)
  hosts: k3s_masters
  gather_facts: true
  become: true
  serial: 1  # Deploy masters one at a time for HA stability
  tags: [master, k3s]

  pre_tasks:
    - name: Load group variables explicitly
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../group_vars/k3s_cluster.yml"
      tags: [always]

  roles:
    - role: k3s-master
      vars:
        k3s_is_first_master: "{{ inventory_hostname == groups['k3s_masters'][0] }}"

- name: Wait for K3s cluster to be ready
  hosts: k3s_masters[0]
  gather_facts: false
  become: true
  tags: [master, verification]

  tasks:
    - name: Wait for all master nodes to be ready
      ansible.builtin.command: kubectl get nodes
      register: node_status
      until: node_status.stdout.find('Ready') != -1
      retries: 30
      delay: 10
      changed_when: false

    - name: Display cluster node status
      ansible.builtin.debug:
        msg: "{{ node_status.stdout_lines }}"

- name: Deploy K3s worker nodes
  hosts: k3s_workers
  gather_facts: true
  become: true
  tags: [worker, k3s]

  pre_tasks:
    - name: Load group variables explicitly
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../group_vars/k3s_cluster.yml"
      tags: [always]

  roles:
    - role: k3s-worker

- name: Configure kubectl for local access
  hosts: k3s_masters[0]
  gather_facts: false
  become: true
  tags: [kubeconfig]

  pre_tasks:
    - name: Load group variables explicitly
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../group_vars/k3s_cluster.yml"
      tags: [always]

  tasks:
    - name: Fetch kubeconfig from master
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ playbook_dir }}/../kubeconfig/k3s-{{ k3s_cluster_name }}.yaml"
        flat: true

    - name: Update kubeconfig server address
      delegate_to: localhost
      become: false
      ansible.builtin.replace:
        path: "{{ playbook_dir }}/../kubeconfig/k3s-{{ k3s_cluster_name }}.yaml"
        regexp: 'https://127.0.0.1:6443'
        replace: "https://{{ k3s_api_endpoint }}:6443"

    - name: Display kubeconfig location
      delegate_to: localhost
      become: false
      ansible.builtin.debug:
        msg: |
          Kubeconfig saved to: {{ playbook_dir }}/../kubeconfig/k3s-{{ k3s_cluster_name }}.yaml

          To use this cluster, run:
          export KUBECONFIG={{ playbook_dir }}/../kubeconfig/k3s-{{ k3s_cluster_name }}.yaml
          kubectl get nodes

- name: Post-deployment verification
  hosts: localhost
  gather_facts: false
  tags: [verify, post-deployment]

  pre_tasks:
    - name: Load group variables explicitly
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../group_vars/k3s_cluster.yml"
      tags: [always]

  tasks:
    - name: Verify cluster health
      ansible.builtin.command: |
        kubectl get nodes -o wide --kubeconfig={{ playbook_dir }}/../kubeconfig/k3s-{{ k3s_cluster_name }}.yaml
      register: cluster_nodes
      changed_when: false
      failed_when: cluster_nodes.rc != 0

    - name: Display cluster summary
      ansible.builtin.debug:
        msg: |
          ============================================
          K3s Cluster Deployment Complete!
          ============================================
          Cluster Name: {{ k3s_cluster_name }}
          Master Nodes: {{ groups['k3s_masters'] | length }}
          Worker Nodes: {{ groups['k3s_workers'] | length }}
          K3s Version: {{ k3s_version }}

          Cluster Nodes:
          {{ cluster_nodes.stdout }}

          Next Steps:
          1. Export kubeconfig: export KUBECONFIG={{ playbook_dir }}/../kubeconfig/k3s-{{ k3s_cluster_name }}.yaml
          2. Verify cluster: kubectl get nodes
          3. Deploy applications: kubectl apply -f your-app.yaml
          ============================================
