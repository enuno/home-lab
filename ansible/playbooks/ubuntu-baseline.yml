---
# Ubuntu Baseline Configuration Playbook
# Applies basic security and utility configurations to all Ubuntu servers
#
# Usage:
#   ansible-playbook -i inventory/ubuntu-servers.ini playbooks/ubuntu-baseline.yml --ask-vault-pass
#
#   Or with vault password file:
#   ansible-playbook -i inventory/ubuntu-servers.ini playbooks/ubuntu-baseline.yml --vault-password-file ~/.vault_pass
#
# Note: The playbook requires tailscale_auth_key from group_vars/all_vault.yml to be decrypted

- name: Apply baseline configuration to Ubuntu servers
  hosts: all
  gather_facts: true
  become: true
  vars_files:
    - ../group_vars/all_vault.yml

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      tags: [packages]

    - name: Create elvis user with sudo privileges
      ansible.builtin.user:
        name: elvis
        shell: /bin/bash
        groups: sudo
        append: true
        create_home: true
        state: present
      tags: [users]

    - name: Configure passwordless sudo for elvis user
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/elvis
        line: 'elvis ALL=(ALL) NOPASSWD:ALL'
        create: true
        mode: '0440'
        validate: 'visudo -cf %s'
      tags: [users]

    - name: Create .ssh directory for elvis user
      ansible.builtin.file:
        path: /home/elvis/.ssh
        state: directory
        owner: elvis
        group: elvis
        mode: '0700'
      tags: [users, ssh]

    - name: Add SSH public keys for elvis user
      ansible.builtin.authorized_key:
        user: elvis
        state: present
        key: "{{ item }}"
      loop:
        - "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJUnLxKKSdmsHZ73UVcZvNDWatojkrZoA7lR5Z9g86hrCixTsmLtvELi8OalgTmrOKJkR4gFxya78O1v6ERdzw4= macbookpro-secure@secretive.Elvis's-MacBook-Pro-(110).local"
        - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCvhGRFU8sXzUiyVLE8R+suY+siLvGeKhInSb9O8ViiakVFwyifPyA6zPQ39dQXSnTmEm5kaA0/KrziJvvMyjJsyGEEHYyk9m+dQJNlmgjD8KgvC5YW8IqPzy2uMvCHcyMKNN2WR561R9BsmOy1IJ9Uks2C07puhGBNjIS4Mqy48+eqY+OaTj0PvCGhO4FKvnRDBueoa3jdPHncfb0/qQ4P8I2VatXuau/ohNi5X0lp9UVceui7cBsvqZoe84AxKqJK6fTQGi1RSDymc/FUTG+xFtHLoew+/eSWihbQSfknWNUGxTfmuluUZvdOYGDoqY6TpJOyItd11W/BsZhdV+NLiDj0ZU6zrAJsZtvK/QXrI6AakmEb0EyB6vjhbkDWErzrGFfWnpOGFSnamALW/UOGbXvLAX+p22xmmszuw+fmD/aSCt7MWQfaMamKB+ZHQuyc5Yholc8Hy+Ny265G3u83vrff71hE7bCXCh5HlT9Q8FpIvu7l872EOGzdO6bA7O8= elvis@MacBookPro.homelab"
        - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMrs5MDrb9J15wMv2HpkiUT47Ix4TKNUs4rnampxcWjx elvis@kali"
      tags: [users, ssh]

    - name: Install baseline packages
      ansible.builtin.apt:
        name:
          - fail2ban
          - nmap
          - zsh
          - git
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
        state: present
      tags: [packages]

    - name: Check if Docker is already installed
      ansible.builtin.command: docker --version
      register: docker_check
      changed_when: false
      failed_when: false
      tags: [docker]

    - name: Display Docker installation status
      ansible.builtin.debug:
        msg: "Docker is {{ 'already installed: ' + docker_check.stdout if docker_check.rc == 0 else 'not installed, will install now' }}"
      tags: [docker]

    - name: Download Docker installation script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'
      when: docker_check.rc != 0
      tags: [docker]

    - name: Install Docker using official script
      ansible.builtin.command: sh /tmp/get-docker.sh
      when: docker_check.rc != 0
      changed_when: true
      tags: [docker]

    - name: Remove Docker installation script
      ansible.builtin.file:
        path: /tmp/get-docker.sh
        state: absent
      when: docker_check.rc != 0
      tags: [docker]

    - name: Add ansible user to docker group
      ansible.builtin.user:
        name: ansible
        groups: docker
        append: true
      tags: [docker]

    - name: Add elvis user to docker group
      ansible.builtin.user:
        name: elvis
        groups: docker
        append: true
      tags: [docker]

    - name: Install Docker Compose plugin
      ansible.builtin.apt:
        name: docker-compose-plugin
        state: present
        update_cache: true
      tags: [docker]

    - name: Ensure Docker service is started and enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      tags: [docker]

    - name: Verify Docker installation
      ansible.builtin.command: docker run --rm hello-world
      register: docker_test
      changed_when: false
      failed_when: false
      tags: [docker, verify]

    - name: Display Docker verification result
      ansible.builtin.debug:
        msg: "Docker verification: {{ 'SUCCESS - Docker is working correctly' if docker_test.rc == 0 else 'FAILED - Docker may not be properly installed' }}"
      tags: [docker, verify]

    - name: Check if Tailscale is already installed
      ansible.builtin.command: tailscale --version
      register: tailscale_check
      changed_when: false
      failed_when: false
      tags: [tailscale]

    - name: Display Tailscale installation status
      ansible.builtin.debug:
        msg: "Tailscale is {{ 'already installed: ' + tailscale_check.stdout if tailscale_check.rc == 0 else 'not installed, will install now' }}"
      tags: [tailscale]

    - name: Download Tailscale installation script
      ansible.builtin.get_url:
        url: https://tailscale.com/install.sh
        dest: /tmp/tailscale-install.sh
        mode: '0755'
      when: tailscale_check.rc != 0
      tags: [tailscale]

    - name: Install Tailscale using official script
      ansible.builtin.command: sh /tmp/tailscale-install.sh
      when: tailscale_check.rc != 0
      changed_when: true
      tags: [tailscale]

    - name: Remove Tailscale installation script
      ansible.builtin.file:
        path: /tmp/tailscale-install.sh
        state: absent
      when: tailscale_check.rc != 0
      tags: [tailscale]

    - name: Check if Tailscale is already connected
      ansible.builtin.command: tailscale status
      register: tailscale_status
      changed_when: false
      failed_when: false
      tags: [tailscale]

    - name: Connect to Tailscale network
      ansible.builtin.command: >
        tailscale up
        --auth-key={{ tailscale_auth_key }}
        --ssh
        --accept-routes=true
      when:
        - tailscale_auth_key is defined
        - tailscale_status.rc != 0 or 'Logged out' in tailscale_status.stdout
      changed_when: true
      tags: [tailscale]
      no_log: true

    - name: Display Tailscale connection warning
      ansible.builtin.debug:
        msg: "WARNING: Tailscale auth key not defined. Set 'tailscale_auth_key' variable to connect to Tailscale network."
      when: tailscale_auth_key is not defined
      tags: [tailscale]

    - name: Get Tailscale status
      ansible.builtin.command: tailscale status --json
      register: tailscale_status_json
      changed_when: false
      failed_when: false
      tags: [tailscale, verify]

    - name: Check if oh-my-zsh is already installed for ansible user
      ansible.builtin.stat:
        path: /home/ansible/.oh-my-zsh
      register: ohmyzsh_ansible_check
      tags: [shell]

    - name: Display oh-my-zsh installation status for ansible user
      ansible.builtin.debug:
        msg: "oh-my-zsh is {{ 'already installed' if ohmyzsh_ansible_check.stat.exists else 'not installed, will install now' }} for ansible user"
      tags: [shell]

    - name: Install oh-my-zsh for ansible user
      ansible.builtin.shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      become: true
      become_user: ansible
      when: not ohmyzsh_ansible_check.stat.exists
      environment:
        HOME: /home/ansible
      tags: [shell]
      changed_when: true

    - name: Set zsh as default shell for ansible user
      ansible.builtin.user:
        name: ansible
        shell: /usr/bin/zsh
      tags: [shell]

    - name: Check if oh-my-zsh is already installed for elvis user
      ansible.builtin.stat:
        path: /home/elvis/.oh-my-zsh
      register: ohmyzsh_elvis_check
      tags: [shell]

    - name: Display oh-my-zsh installation status for elvis user
      ansible.builtin.debug:
        msg: "oh-my-zsh is {{ 'already installed' if ohmyzsh_elvis_check.stat.exists else 'not installed, will install now' }} for elvis user"
      tags: [shell]

    - name: Install oh-my-zsh for elvis user
      ansible.builtin.shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      become: true
      become_user: elvis
      when: not ohmyzsh_elvis_check.stat.exists
      environment:
        HOME: /home/elvis
      tags: [shell]
      changed_when: true

    - name: Set zsh as default shell for elvis user
      ansible.builtin.user:
        name: elvis
        shell: /usr/bin/zsh
      tags: [shell]

    - name: Ensure fail2ban is enabled and running
      ansible.builtin.systemd:
        name: fail2ban
        enabled: true
        state: started
      tags: [security]

    - name: Configure UFW - Allow SSH
      community.general.ufw:
        rule: allow
        name: OpenSSH
      tags: [firewall, security]

    - name: Configure UFW - Enable firewall
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming
      tags: [firewall, security]

    - name: Get Docker version
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false
      failed_when: false
      tags: [always]

    - name: Get Docker Compose version
      ansible.builtin.command: docker compose version
      register: docker_compose_version
      changed_when: false
      failed_when: false
      tags: [always]

    - name: Get Tailscale version
      ansible.builtin.command: tailscale version
      register: tailscale_version
      changed_when: false
      failed_when: false
      tags: [always]

    - name: Get Tailscale connection status
      ansible.builtin.command: tailscale status --peers=false
      register: tailscale_connection_status
      changed_when: false
      failed_when: false
      tags: [always]

    - name: Display baseline configuration summary
      ansible.builtin.debug:
        msg: |
          ============================================
          Ubuntu Baseline Configuration Complete
          ============================================
          User Configuration:
            - elvis user created with passwordless sudo
            - 3 SSH public keys added for elvis user
            - SSH key-based authentication enabled

          Packages Installed:
            - fail2ban (intrusion prevention)
            - nmap (network scanning)
            - zsh (advanced shell)
            - git (version control)
            - curl (data transfer)
            - ca-certificates, gnupg, lsb-release

          Docker Configuration:
            - {{ docker_version.stdout if docker_version.rc == 0 else 'Docker not installed' }}
            - {{ docker_compose_version.stdout if docker_compose_version.rc == 0 else 'Docker Compose not installed' }}
            - ansible user added to docker group
            - elvis user added to docker group
            - Docker service enabled and running

          Tailscale Configuration:
            - {{ tailscale_version.stdout.split('\n')[0] if tailscale_version.rc == 0 else 'Tailscale not installed' }}
            - SSH enabled via Tailscale
            - Route acceptance enabled
            - Status: {{ 'Connected' if tailscale_connection_status.rc == 0 and tailscale_connection_status.stdout | length > 0 else 'Not connected (auth key needed)' }}

          Shell Configuration:
            - oh-my-zsh installed for ansible user
            - oh-my-zsh installed for elvis user
            - zsh set as default shell for both users

          Security:
            - fail2ban enabled and running
            - UFW firewall enabled
            - SSH access allowed
            - Default incoming policy: DENY
            - Passwordless sudo for elvis (administrative access)

          Next Steps:
            - Logout and login again for docker group to take effect
            - Test Docker: docker run --rm hello-world
            - Test Docker Compose: docker compose version
            - Check Tailscale status: tailscale status
            - Access via Tailscale SSH: ssh user@hostname.tailnet-name.ts.net

          Important:
            - Tailscale auth key should be stored in group_vars/all_vault.yml
            - Set variable: tailscale_auth_key: "tskey-auth-xxx..."
            - Encrypt vault: ansible-vault encrypt group_vars/all_vault.yml
          ============================================
      tags: [always]
