---
# Tailscale SSH Recorder Deployment Playbook
# Deploys the Tailscale SSH session recorder as a Docker container
#
# Purpose:
#   - Record SSH sessions for security auditing and compliance
#   - Store encrypted session recordings using Tailscale infrastructure
#   - Provide web UI for playback of recorded sessions
#
# Prerequisites:
#   - Docker must be installed on target host
#   - Tailscale auth key must be defined in group_vars/ts-recorder_vault.yml
#   - Sufficient disk space for recordings in data directory
#   - ACL policy configured in Tailscale admin console (see ACL Configuration below)
#
# ACL Configuration Required:
#   The Tailscale ACL policy must include a recorder field in SSH access rules.
#   Add this to your ACL policy in the Tailscale admin console:
#
#   "ssh": [
#     {
#       "action": "check",
#       "src": ["autogroup:members"],
#       "dst": ["autogroup:self"],
#       "users": ["autogroup:nonroot", "root"],
#       "recorder": ["tag:session-recorder"],
#       "enforceRecorder": false
#     }
#   ]
#
#   Then create the tag:session-recorder and assign it to the recorder node.
#   Set enforceRecorder: true to require recording for all SSH sessions.
#
# Usage:
#   ansible-playbook -i inventory/ts-ssh-recorder.ini playbooks/tailscale-ssh-recorder-deploy.yml --ask-vault-pass
#
#   Or with vault password file:
#   ansible-playbook -i inventory/ts-ssh-recorder.ini playbooks/tailscale-ssh-recorder-deploy.yml --vault-password-file ~/.vault_pass
#
# Variables (Required):
#   - tailscale_auth_key: Auth key from group_vars/ts-recorder_vault.yml (required)
#
# Variables (Optional):
#   - tsrecorder_data_directory: Local directory for recordings (default: /home/ansible/tsrecorder)
#   - tsrecorder_container_name: Docker container name (default: ts-ssh-recorder)
#   - tsrecorder_docker_image: Docker image to use (default: tailscale/tsrecorder:stable)
#   - tsrecorder_hostname: Custom hostname for the recorder (default: recorder)

- name: Deploy Tailscale SSH Recorder
  hosts: ts-ssh-recorder
  gather_facts: true
  become: true
  vars_files:
    - ../group_vars/ts-recorder_vault.yml

  tasks:
    - name: Verify Docker is installed
      ansible.builtin.command: docker --version
      register: docker_check
      changed_when: false
      failed_when: docker_check.rc != 0
      tags: [verify]

    - name: Display Docker version
      ansible.builtin.debug:
        msg: "Docker version: {{ docker_check.stdout }}"
      tags: [verify]

    - name: Verify Tailscale auth key is defined
      ansible.builtin.assert:
        that:
          - tailscale_auth_key is defined
          - tailscale_auth_key | length > 0
        fail_msg: "ERROR: tailscale_auth_key must be defined in group_vars/ts-recorder_vault.yml"
        success_msg: "Tailscale auth key is properly configured"
      tags: [verify]

    - name: Create data directory for recordings
      ansible.builtin.file:
        path: "{{ tsrecorder_data_directory }}"
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'
      tags: [setup]

    - name: Create recordings subdirectory
      ansible.builtin.file:
        path: "{{ tsrecorder_data_directory }}/recordings"
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'
      tags: [setup]

    - name: Create state subdirectory
      ansible.builtin.file:
        path: "{{ tsrecorder_data_directory }}/state"
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'
      tags: [setup]

    - name: Check if Tailscale SSH recorder container is already running
      ansible.builtin.command: docker ps -q -f name={{ tsrecorder_container_name }}
      register: container_running
      changed_when: false
      failed_when: false
      tags: [deploy]

    - name: Stop existing Tailscale SSH recorder container
      ansible.builtin.command: docker stop {{ tsrecorder_container_name }}
      when: container_running.stdout | length > 0
      changed_when: true
      tags: [deploy]

    - name: Remove existing Tailscale SSH recorder container
      ansible.builtin.command: docker rm {{ tsrecorder_container_name }}
      when: container_running.stdout | length > 0
      changed_when: true
      failed_when: false
      tags: [deploy]

    - name: Pull latest Tailscale SSH recorder image
      ansible.builtin.command: docker pull {{ tsrecorder_docker_image }}
      changed_when: true
      tags: [deploy]

    - name: Deploy Tailscale SSH recorder container
      ansible.builtin.command: >
        docker run -d
        --name {{ tsrecorder_container_name }}
        --restart unless-stopped
        -e TS_AUTHKEY={{ tailscale_auth_key }}
        {% if tsrecorder_hostname is defined %}-e TS_HOSTNAME={{ tsrecorder_hostname }}{% endif %}
        -v {{ tsrecorder_data_directory }}:/data
        {{ tsrecorder_docker_image }}
        /tsrecorder --dst=/data/recordings --statedir=/data/state --ui
      changed_when: true
      no_log: true
      tags: [deploy]

    - name: Wait for container to start
      ansible.builtin.pause:
        seconds: 5
      tags: [deploy]

    - name: Verify container is running
      ansible.builtin.command: docker ps -f name={{ tsrecorder_container_name }}
      register: container_status
      changed_when: false
      tags: [verify]

    - name: Display container status
      ansible.builtin.debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: [verify]

    - name: Get container logs
      ansible.builtin.command: docker logs {{ tsrecorder_container_name }} --tail 50
      register: container_logs
      changed_when: false
      failed_when: false
      tags: [verify, logs]

    - name: Display container logs
      ansible.builtin.debug:
        msg: "{{ container_logs.stdout_lines }}"
      tags: [logs]

    - name: Check container health
      ansible.builtin.shell: docker inspect {{ tsrecorder_container_name }} --format={% raw %}'{{.State.Status}}'{% endraw %}
      register: container_health
      changed_when: false
      failed_when: container_health.stdout != 'running'
      tags: [verify]

    - name: Get Tailscale connection info from container
      ansible.builtin.command: docker exec {{ tsrecorder_container_name }} tailscale status
      register: tailscale_status
      changed_when: false
      failed_when: false
      tags: [verify]

    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          ============================================
          Tailscale SSH Recorder Deployment Complete
          ============================================
          Container Information:
            - Container name: {{ tsrecorder_container_name }}
            - Docker image: {{ tsrecorder_docker_image }}
            - Container status: {{ container_health.stdout }}
            - Restart policy: unless-stopped

          Data Storage:
            - Data directory: {{ tsrecorder_data_directory }}
            - Recordings path: {{ tsrecorder_data_directory }}/recordings
            - State directory: {{ tsrecorder_data_directory }}/state

          Features Enabled:
            - SSH session recording: ✓
            - Web UI for playback: ✓
            - Tailscale integration: ✓

          Tailscale Status:
          {{ tailscale_status.stdout if tailscale_status.rc == 0 else '  Unable to get Tailscale status (container may still be initializing)' }}

          Access Information:
            - The recorder will appear in your Tailscale network
            - Access web UI via Tailscale hostname
            - Check Tailscale admin console for hostname
            - UI typically available at: https://<hostname>.tailnet.ts.net

          Useful Commands:
            - View logs: docker logs {{ tsrecorder_container_name }}
            - Follow logs: docker logs -f {{ tsrecorder_container_name }}
            - Restart container: docker restart {{ tsrecorder_container_name }}
            - Stop container: docker stop {{ tsrecorder_container_name }}
            - Check status: docker ps -f name={{ tsrecorder_container_name }}
            - Enter container: docker exec -it {{ tsrecorder_container_name }} sh

          Monitoring:
            - Recordings directory: {{ tsrecorder_data_directory }}/recordings
            - Check disk space regularly: df -h {{ tsrecorder_data_directory }}
            - Monitor container health: docker inspect {{ tsrecorder_container_name }}

          Security Notes:
            - Sessions are encrypted using Tailscale infrastructure
            - Auth key stored securely in Ansible vault
            - Access restricted to Tailscale network members
            - Review recordings regularly for compliance

          IMPORTANT - ACL Configuration Required:
            The recorder will NOT work until you configure your Tailscale ACL policy.
            Add this to your ACL policy in the Tailscale admin console:

            "ssh": [
              {
                "action": "check",
                "src": ["autogroup:members"],
                "dst": ["autogroup:self"],
                "users": ["autogroup:nonroot", "root"],
                "recorder": ["tag:session-recorder"],
                "enforceRecorder": false
              }
            ]

            Then:
            1. Create the tag:session-recorder in the Tailscale admin console
            2. Assign the tag to this recorder node
            3. Set enforceRecorder: true to require recording for all SSH sessions

          Next Steps:
            1. Configure ACL policy in Tailscale admin console (see above)
            2. Create and assign tag:session-recorder to the recorder node
            3. Check Tailscale admin console for the recorder hostname
            4. Access the web UI at https://<hostname>.tailnet.ts.net
            5. Test recording functionality with a sample SSH session
            6. Set up monitoring and alerting for disk space
            7. Document recorder access procedures for your team
          ============================================
      tags: [always]
