#!/bin/bash
# HAProxy + keepalived High Availability Load Balancer Deployment Script
# This script deploys HAProxy (Docker) and keepalived (package) for HA load balancing
# Generated by Ansible automation

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INVENTORY="${SCRIPT_DIR}/inventory/haproxy-cluster.ini"
PLAYBOOK="${SCRIPT_DIR}/playbooks/haproxy-keepalived-deploy.yml"
VAULT_PASSWORD_FILE="${SCRIPT_DIR}/.vault_password"

# Function to print colored messages
print_message() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

print_header() {
    echo ""
    print_message "$BLUE" "================================================================"
    print_message "$BLUE" "$1"
    print_message "$BLUE" "================================================================"
    echo ""
}

print_error() {
    print_message "$RED" "ERROR: $1"
}

print_success() {
    print_message "$GREEN" "SUCCESS: $1"
}

print_warning() {
    print_message "$YELLOW" "WARNING: $1"
}

print_info() {
    print_message "$BLUE" "INFO: $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"

    local missing_deps=0

    # Check for ansible
    if command_exists ansible; then
        print_success "Ansible is installed ($(ansible --version | head -n1))"
    else
        print_error "Ansible is not installed"
        missing_deps=1
    fi

    # Check for ansible-playbook
    if command_exists ansible-playbook; then
        print_success "ansible-playbook is available"
    else
        print_error "ansible-playbook is not available"
        missing_deps=1
    fi

    # Check if inventory file exists
    if [ -f "$INVENTORY" ]; then
        print_success "Inventory file found: $INVENTORY"
    else
        print_error "Inventory file not found: $INVENTORY"
        missing_deps=1
    fi

    # Check if playbook exists
    if [ -f "$PLAYBOOK" ]; then
        print_success "Playbook file found: $PLAYBOOK"
    else
        print_error "Playbook file not found: $PLAYBOOK"
        missing_deps=1
    fi

    # Check SSH key
    if [ -f "$HOME/.ssh/id_ed25519" ] || [ -f "$HOME/.ssh/id_rsa" ]; then
        print_success "SSH key found"
    else
        print_warning "SSH key not found in default locations"
    fi

    if [ $missing_deps -eq 1 ]; then
        print_error "Missing dependencies. Please install required tools."
        exit 1
    fi

    print_success "All prerequisites met"
}

# Function to test connectivity
test_connectivity() {
    print_header "Testing Connectivity to HAProxy Cluster"

    if ! ansible haproxy_cluster -i "$INVENTORY" -m ping; then
        print_error "Cannot connect to HAProxy cluster nodes"
        print_info "Please ensure:"
        print_info "  1. SSH keys are properly configured"
        print_info "  2. Target hosts are reachable"
        print_info "  3. Inventory file has correct IP addresses"
        exit 1
    fi

    print_success "Successfully connected to all cluster nodes"
}

# Function to display deployment information
show_deployment_info() {
    print_header "Deployment Configuration"

    print_info "Reading configuration from group_vars/haproxy.yml"

    if [ -f "${SCRIPT_DIR}/group_vars/haproxy.yml" ]; then
        # Extract key configuration values
        local vip=$(grep "haproxy_virtual_ip:" "${SCRIPT_DIR}/group_vars/haproxy.yml" | awk '{print $2}' | tr -d '"' | head -n1)
        local stats_port=$(grep "haproxy_stats_port:" "${SCRIPT_DIR}/group_vars/haproxy.yml" | awk '{print $2}' | head -n1)

        print_info "Virtual IP: ${vip:-Not configured}"
        print_info "Stats Port: ${stats_port:-8404}"
        print_info ""
        print_warning "Please ensure these values are correct in group_vars/haproxy.yml"
    else
        print_warning "group_vars/haproxy.yml not found"
    fi
}

# Function to run the deployment
deploy() {
    print_header "Starting HAProxy + keepalived Deployment"

    local ansible_args="-i $INVENTORY"

    # Add vault password file if it exists
    if [ -f "$VAULT_PASSWORD_FILE" ]; then
        ansible_args="$ansible_args --vault-password-file=$VAULT_PASSWORD_FILE"
        print_info "Using vault password file"
    fi

    # Add any extra arguments passed to the script
    if [ -n "$EXTRA_ARGS" ]; then
        ansible_args="$ansible_args $EXTRA_ARGS"
        print_info "Extra arguments: $EXTRA_ARGS"
    fi

    print_info "Executing: ansible-playbook $ansible_args $PLAYBOOK"
    echo ""

    if ansible-playbook $ansible_args "$PLAYBOOK"; then
        print_success "Deployment completed successfully!"
        show_post_deployment_info
    else
        print_error "Deployment failed!"
        exit 1
    fi
}

# Function to run only specific tags
deploy_with_tags() {
    local tags=$1
    print_header "Running Deployment with Tags: $tags"

    local ansible_args="-i $INVENTORY --tags $tags"

    if [ -f "$VAULT_PASSWORD_FILE" ]; then
        ansible_args="$ansible_args --vault-password-file=$VAULT_PASSWORD_FILE"
    fi

    if ansible-playbook $ansible_args "$PLAYBOOK"; then
        print_success "Deployment completed successfully!"
    else
        print_error "Deployment failed!"
        exit 1
    fi
}

# Function to run dry-run (check mode)
dry_run() {
    print_header "Running Deployment Dry-Run (Check Mode)"

    local ansible_args="-i $INVENTORY --check --diff"

    if [ -f "$VAULT_PASSWORD_FILE" ]; then
        ansible_args="$ansible_args --vault-password-file=$VAULT_PASSWORD_FILE"
    fi

    ansible-playbook $ansible_args "$PLAYBOOK"
}

# Function to show post-deployment information
show_post_deployment_info() {
    print_header "Post-Deployment Information"

    local vip=$(grep "haproxy_virtual_ip:" "${SCRIPT_DIR}/group_vars/haproxy.yml" | awk '{print $2}' | tr -d '"' | head -n1)
    local stats_port=$(grep "haproxy_stats_port:" "${SCRIPT_DIR}/group_vars/haproxy.yml" | awk '{print $2}' | head -n1)

    print_info "HAProxy Stats Interface:"
    print_info "  URL: http://${vip:-VIP}:${stats_port:-8404}/stats"
    print_info ""
    print_info "Health Check Endpoint:"
    print_info "  URL: http://${vip:-VIP}:${stats_port:-8404}/health"
    print_info ""
    print_info "Useful Commands:"
    print_info "  # View HAProxy logs"
    print_info "  ssh user@haproxy-node 'docker logs -f haproxy'"
    print_info ""
    print_info "  # View keepalived logs"
    print_info "  ssh user@haproxy-node 'journalctl -u keepalived -f'"
    print_info ""
    print_info "  # Check Virtual IP assignment"
    print_info "  ssh user@haproxy-node 'ip addr show | grep ${vip:-VIP}'"
    print_info ""
    print_info "  # Test failover"
    print_info "  ssh user@primary-node 'sudo systemctl stop keepalived'"
}

# Function to show usage
show_usage() {
    cat << EOF
HAProxy + keepalived High Availability Load Balancer Deployment Script

USAGE:
    $0 [OPTIONS]

OPTIONS:
    -h, --help              Show this help message
    -c, --check             Run in check mode (dry-run)
    -t, --test              Test connectivity to cluster nodes
    -d, --deploy            Run full deployment
    -i, --info              Show deployment configuration
    -T, --tags TAGS         Run only specific tags (comma-separated)
    -e, --extra ARGS        Pass extra arguments to ansible-playbook

EXAMPLES:
    # Check connectivity
    $0 --test

    # Show deployment information
    $0 --info

    # Run dry-run
    $0 --check

    # Full deployment
    $0 --deploy

    # Deploy only HAProxy (skip keepalived)
    $0 --tags haproxy

    # Deploy only keepalived
    $0 --tags keepalived

    # Run with extra Ansible arguments
    $0 --deploy --extra "--verbose"

TAGS:
    preflight, validation   - Pre-deployment checks
    docker                  - Docker installation
    haproxy                 - HAProxy deployment
    keepalived              - keepalived deployment
    verify                  - Post-deployment verification

CONFIGURATION FILES:
    Inventory: $INVENTORY
    Playbook:  $PLAYBOOK
    Variables: ${SCRIPT_DIR}/group_vars/haproxy.yml

EOF
}

# Main script logic
main() {
    case "${1:-}" in
        -h|--help)
            show_usage
            exit 0
            ;;
        -c|--check)
            check_prerequisites
            dry_run
            ;;
        -t|--test)
            check_prerequisites
            test_connectivity
            ;;
        -i|--info)
            show_deployment_info
            ;;
        -d|--deploy)
            check_prerequisites
            test_connectivity
            show_deployment_info
            read -p "Continue with deployment? (yes/no): " -r
            if [[ $REPLY =~ ^[Yy]es$ ]]; then
                deploy
            else
                print_warning "Deployment cancelled"
                exit 0
            fi
            ;;
        -T|--tags)
            if [ -z "${2:-}" ]; then
                print_error "Tags argument required"
                show_usage
                exit 1
            fi
            check_prerequisites
            deploy_with_tags "$2"
            ;;
        -e|--extra)
            if [ -z "${2:-}" ]; then
                print_error "Extra arguments required"
                show_usage
                exit 1
            fi
            EXTRA_ARGS="$2"
            shift 2
            main "$@"
            ;;
        "")
            # No arguments - show interactive menu
            print_header "HAProxy + keepalived Deployment"
            echo "1) Test connectivity"
            echo "2) Show deployment info"
            echo "3) Run dry-run (check mode)"
            echo "4) Deploy HAProxy + keepalived"
            echo "5) Exit"
            echo ""
            read -p "Select an option (1-5): " -r option

            case $option in
                1)
                    check_prerequisites
                    test_connectivity
                    ;;
                2)
                    show_deployment_info
                    ;;
                3)
                    check_prerequisites
                    dry_run
                    ;;
                4)
                    check_prerequisites
                    test_connectivity
                    show_deployment_info
                    read -p "Continue with deployment? (yes/no): " -r
                    if [[ $REPLY =~ ^[Yy]es$ ]]; then
                        deploy
                    else
                        print_warning "Deployment cancelled"
                        exit 0
                    fi
                    ;;
                5)
                    print_info "Exiting..."
                    exit 0
                    ;;
                *)
                    print_error "Invalid option"
                    exit 1
                    ;;
            esac
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
