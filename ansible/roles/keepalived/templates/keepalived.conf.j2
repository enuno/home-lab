# keepalived Configuration File
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Managed by: {{ ansible_managed | default('Ansible') }}
# Documentation: https://www.keepalived.org/manpage.html

# Global definitions
global_defs {
    # Identification
    router_id {{ ansible_hostname }}

{% if keepalived_enable_notifications %}
    # Email notifications
    notification_email {
        {{ keepalived_notification_email }}
    }
    notification_email_from {{ keepalived_notification_email_from }}
    smtp_server {{ keepalived_smtp_server }}
    smtp_connect_timeout {{ keepalived_smtp_connect_timeout }}
{% endif %}

    # Logging
{% if keepalived_enable_syslog %}
    # Log to syslog
{% endif %}
{% if keepalived_enable_detailed_log %}
    enable_script_security
    script_user root
{% endif %}

    # Performance
    vrrp_garp_master_delay {{ keepalived_vrrp_garp_master_delay }}
    vrrp_garp_master_repeat {{ keepalived_vrrp_garp_master_repeat }}
    vrrp_garp_master_refresh {{ keepalived_vrrp_garp_master_refresh }}
}

# Health check script for HAProxy
vrrp_script check_haproxy {
    script "{{ keepalived_check_script }}"
    interval {{ keepalived_check_interval }}
    weight {{ keepalived_check_weight }}
    fall {{ keepalived_check_fall }}
    rise {{ keepalived_check_rise }}
}

{% for script in keepalived_vrrp_scripts %}
# Additional health check script: {{ script.name }}
vrrp_script {{ script.name }} {
    script "{{ script.script }}"
    interval {{ script.interval }}
    weight {{ script.weight }}
}

{% endfor %}

# VRRP instance configuration
vrrp_instance VI_1 {
    # State and priority
{% if inventory_hostname in groups['haproxy_primary'] %}
    state MASTER
    priority 100
{% else %}
    state BACKUP
    priority {{ haproxy_keepalived_priority }}
{% endif %}

    # Network interface to use
    interface {{ haproxy_network_interface }}

    # Virtual router ID (must be unique on the network)
    virtual_router_id {{ haproxy_virtual_router_id }}

    # VRRP advertisement interval
    advert_int {{ keepalived_advert_interval }}

    # Authentication
    authentication {
        auth_type {{ keepalived_auth_type }}
        auth_pass {{ keepalived_auth_pass }}
    }

{% if keepalived_use_unicast %}
    # Unicast mode (recommended for cloud/virtualized environments)
    unicast_src_ip {{ keepalived_unicast_src_ip }}
    unicast_peer {
{% for peer in keepalived_unicast_peers %}
        {{ peer }}
{% endfor %}
    }
{% endif %}

{% if keepalived_nopreempt %}
    # Don't preempt when coming back online
    nopreempt
{% if keepalived_preempt_delay > 0 %}
    preempt_delay {{ keepalived_preempt_delay }}
{% endif %}
{% endif %}

    # Virtual IP addresses
    virtual_ipaddress {
        {{ haproxy_virtual_ip }}/{{ haproxy_virtual_ip_cidr | default('24') }} dev {{ haproxy_network_interface }} label {{ haproxy_network_interface }}:0
{% for vip in keepalived_additional_vips %}
        {{ vip.address }} dev {{ vip.interface }}
{% endfor %}
    }

{% if keepalived_track_interface %}
    # Track network interface
    track_interface {
        {{ haproxy_network_interface }} weight {{ keepalived_track_interface_weight }}
    }
{% endif %}

    # Track scripts
    track_script {
        check_haproxy
{% for script in keepalived_vrrp_scripts %}
        {{ script.name }}
{% endfor %}
    }

{% if keepalived_enable_notifications %}
    # Notification scripts
    notify_master "/etc/keepalived/notify.sh MASTER"
    notify_backup "/etc/keepalived/notify.sh BACKUP"
    notify_fault "/etc/keepalived/notify.sh FAULT"
{% endif %}
}

# Additional VRRP instances can be added below
# Example for a second VIP:
# vrrp_instance VI_2 {
#     state BACKUP
#     interface {{ haproxy_network_interface }}
#     virtual_router_id {{ haproxy_virtual_router_id + 1 }}
#     priority {{ haproxy_keepalived_priority - 10 }}
#     advert_int {{ keepalived_advert_interval }}
#     authentication {
#         auth_type {{ keepalived_auth_type }}
#         auth_pass {{ keepalived_auth_pass }}
#     }
#     virtual_ipaddress {
#         192.168.1.101
#     }
#     track_script {
#         check_haproxy
#     }
# }
