#!/bin/bash
#
# Router Configuration Deployment Script
# Generated by Ansible for K3s MetalLB BGP setup
#
# This script helps deploy the BGP configuration to your router
#

set -euo pipefail

# Configuration
ROUTER_TYPE="{{ metallb_router_type | default('frr') }}"
CONFIG_DIR="{{ metallb_router_config_dir }}"
BGP_ASN="{{ metallb_bgp_asn }}"
CLUSTER_NODES="{{ metallb_nodes | join(',') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
}

# Deploy FRR configuration
deploy_frr() {
    log_info "Deploying FRR BGP configuration..."

    # Backup existing configuration
    if [[ -f /etc/frr/frr.conf ]]; then
        cp /etc/frr/frr.conf /etc/frr/frr.conf.backup.$(date +%Y%m%d_%H%M%S)
        log_info "Backed up existing FRR configuration"
    fi

    # Copy new configuration
    cp "${CONFIG_DIR}/frr-bgp.conf" /etc/frr/frr.conf
    chown frr:frr /etc/frr/frr.conf
    chmod 644 /etc/frr/frr.conf

    # Restart FRR service
    systemctl restart frr
    systemctl enable frr

    log_info "FRR configuration deployed successfully"
}

# Deploy BIRD configuration
deploy_bird() {
    log_info "Deploying BIRD BGP configuration..."

    # Backup existing configuration
    if [[ -f /etc/bird/bird.conf ]]; then
        cp /etc/bird/bird.conf /etc/bird/bird.conf.backup.$(date +%Y%m%d_%H%M%S)
        log_info "Backed up existing BIRD configuration"
    fi

    # Copy new configuration
    cp "${CONFIG_DIR}/bird-bgp.conf" /etc/bird/bird.conf
    chown bird:bird /etc/bird/bird.conf
    chmod 644 /etc/bird/bird.conf

    # Restart BIRD service
    systemctl restart bird
    systemctl enable bird

    log_info "BIRD configuration deployed successfully"
}

# Deploy UniFi configuration
deploy_unifi() {
    log_info "Preparing UniFi UDM Pro BGP configuration..."

    log_info "Configuration files generated:"
    log_info "  - JSON Config: ${CONFIG_DIR}/unifi-bgp.json"
    log_info "  - CLI Commands: ${CONFIG_DIR}/unifi-cli-commands.txt"

    log_warn "Manual configuration required for UniFi UDM Pro"
    log_info "Please follow these steps:"
    log_info "1. SSH to your UDM Pro: ssh admin@{{ metallb_bgp_router_ip }}"
    log_info "2. Enter configuration mode: configure"
    log_info "3. Copy and paste commands from: ${CONFIG_DIR}/unifi-cli-commands.txt"
    log_info "4. Commit and save: commit && save"
    log_info "5. Verify BGP status: show bgp summary"

    log_info "Alternative: Use UniFi Network Application GUI if BGP is supported"
    log_info "Import the JSON configuration: ${CONFIG_DIR}/unifi-bgp.json"
}

# Validate BGP connectivity
validate_bgp() {
    log_info "Validating BGP connectivity..."

    case "${ROUTER_TYPE}" in
        frr)
            if command -v vtysh &> /dev/null; then
                vtysh -c "show bgp summary"
            else
                log_warn "vtysh not found, cannot validate FRR BGP status"
            fi
            ;;
        bird)
            if command -v birdc &> /dev/null; then
                birdc show protocols
            else
                log_warn "birdc not found, cannot validate BIRD BGP status"
            fi
            ;;
        unifi)
            log_info "To validate UniFi BGP status, SSH to your UDM Pro and run:"
            log_info "  show bgp summary"
            log_info "  show bgp neighbors"
            log_info "  show bgp ipv4 unicast"
            ;;
        *)
            log_warn "BGP validation not implemented for ${ROUTER_TYPE}"
            ;;
    esac
}

# Main deployment function
main() {
    log_info "Starting router configuration deployment..."
    log_info "Router Type: ${ROUTER_TYPE}"
    log_info "BGP ASN: ${BGP_ASN}"
    log_info "Cluster Nodes: ${CLUSTER_NODES}"

    # Check prerequisites
    check_root

    # Deploy configuration based on router type
    case "${ROUTER_TYPE}" in
        frr)
            deploy_frr
            ;;
        bird)
            deploy_bird
            ;;
        cisco|juniper)
            log_warn "Manual configuration required for ${ROUTER_TYPE}"
            log_info "Configuration file: ${CONFIG_DIR}/${ROUTER_TYPE}-bgp.conf"
            log_info "Please apply this configuration manually to your router"
            exit 0
            ;;
        unifi)
            deploy_unifi
            ;;
        *)
            log_error "Unsupported router type: ${ROUTER_TYPE}"
            exit 1
            ;;
    esac

    # Wait for services to start
    sleep 5

    # Validate configuration
    validate_bgp

    log_info "Router configuration deployment completed!"
    log_info "Monitor BGP sessions and adjust as needed"
}

# Run main function
main "$@"
