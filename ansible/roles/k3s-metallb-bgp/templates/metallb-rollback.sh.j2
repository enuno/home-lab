#!/bin/bash
#
# MetalLB Rollback Script
# Generated by Ansible for K3s MetalLB BGP migration
#
# This script rolls back from BGP mode to L2 mode
#

set -euo pipefail

# Configuration
BACKUP_DIR="{{ metallb_migration_backup_dir }}"
KUBECONFIG="/etc/rancher/k3s/k3s.yaml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Check if backup files exist
check_backup_files() {
    log_step "Checking backup files..."

    local required_files=(
        "${BACKUP_DIR}/ipaddresspool-backup.yaml"
        "${BACKUP_DIR}/l2advertisement-backup.yaml"
        "${BACKUP_DIR}/loadbalancer-services-backup.yaml"
    )

    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "Backup file not found: $file"
            exit 1
        fi
    done

    log_info "All backup files found"
}

# Rollback BGP configuration
rollback_bgp_config() {
    log_step "Removing BGP configuration..."

    # Remove BGP advertisements
    kubectl delete bgpadvertisement -n metallb-system --all --ignore-not-found=true
    log_info "BGP advertisements removed"

    # Remove BGP peers
    kubectl delete bgppeer -n metallb-system --all --ignore-not-found=true
    log_info "BGP peers removed"

    # Remove BGP IP address pools
    kubectl delete ipaddresspool -n metallb-system bgp-default --ignore-not-found=true
    log_info "BGP IP address pools removed"
}

# Restore L2 configuration
restore_l2_config() {
    log_step "Restoring L2 configuration..."

    # Restore IPAddressPool
    kubectl apply -f "${BACKUP_DIR}/ipaddresspool-backup.yaml"
    log_info "IPAddressPool configuration restored"

    # Restore L2Advertisement
    kubectl apply -f "${BACKUP_DIR}/l2advertisement-backup.yaml"
    log_info "L2Advertisement configuration restored"
}

# Restore LoadBalancer services
restore_services() {
    log_step "Restoring LoadBalancer services..."

    # Restore services to L2 mode
    kubectl apply -f "${BACKUP_DIR}/loadbalancer-services-backup.yaml"
    log_info "LoadBalancer services restored to L2 mode"
}

# Verify rollback
verify_rollback() {
    log_step "Verifying rollback..."

    # Check MetalLB configuration
    log_info "Current MetalLB configuration:"
    kubectl get ipaddresspool,l2advertisement,bgppeer,bgpadvertisement -n metallb-system || true

    # Check LoadBalancer services
    log_info "Current LoadBalancer services:"
    kubectl get svc -A -o wide --field-selector spec.type=LoadBalancer || true

    # Test connectivity
    log_info "Testing connectivity to Pi-hole..."
    if curl -s -o /dev/null -w "%{http_code}" http://10.41.0.100/admin/ | grep -q "200"; then
        log_info "Pi-hole web interface is accessible"
    else
        log_warn "Pi-hole web interface may not be accessible yet"
    fi
}

# Main rollback function
main() {
    log_info "Starting MetalLB rollback from BGP to L2 mode..."

    # Check prerequisites
    check_backup_files

    # Confirm rollback
    log_warn "This will rollback MetalLB from BGP mode to L2 mode."
    log_warn "Make sure to update your network routing accordingly."
    read -p "Continue with rollback? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Rollback cancelled"
        exit 0
    fi

    # Perform rollback steps
    rollback_bgp_config
    restore_l2_config
    restore_services

    # Wait for services to stabilize
    log_info "Waiting for services to stabilize..."
    sleep 30

    # Verify rollback
    verify_rollback

    log_info "ðŸŽ‰ Rollback completed successfully!"
    log_info "MetalLB is now running in L2 mode"
    log_info "Remember to update your network routing:"
    log_info "  - Remove anycast routes"
    log_info "  - Add static routes to specific nodes if needed"
}

# Run main function
main "$@"
