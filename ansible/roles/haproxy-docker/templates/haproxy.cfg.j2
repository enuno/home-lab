# HAProxy Configuration File
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Managed by: {{ ansible_managed | default('Ansible') }}
# Documentation: https://www.haproxy.org/download/3.0/doc/configuration.txt

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # Process management
    maxconn {{ haproxy_maxconn }}
    log stdout local0 {{ haproxy_log_level }}

    # Performance tuning
    nbthread {{ haproxy_nbthread }}

    # Stats socket for runtime API
    stats socket /var/run/haproxy.sock mode 660 level admin expose-fd listeners
    stats timeout 30s

    # Security
    user haproxy
    group haproxy
    daemon

    # SSL/TLS settings
{% if haproxy_ssl_enabled %}
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
{% endif %}

#---------------------------------------------------------------------
# Default settings
#---------------------------------------------------------------------
defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  redispatch
    retries 3
    timeout connect {{ haproxy_timeout_connect }}
    timeout client  {{ haproxy_timeout_client }}
    timeout server  {{ haproxy_timeout_server }}
    timeout queue   {{ haproxy_timeout_queue }}
    timeout http-request {{ haproxy_timeout_http_request }}
    timeout http-keep-alive {{ haproxy_timeout_http_keep_alive }}

    # Error pages
{% if haproxy_custom_errors %}
{% for error in haproxy_error_files %}
    errorfile {{ error.code }} {{ error.path }}
{% endfor %}
{% endif %}

    # Compression
{% if haproxy_enable_compression %}
    compression algo {{ haproxy_compression_algorithms }}
    compression type {{ haproxy_compression_types }}
{% endif %}

#---------------------------------------------------------------------
# Stats interface
#---------------------------------------------------------------------
listen stats
    bind *:{{ haproxy_stats_port }}
    mode http
    stats enable
    stats uri {{ haproxy_stats_uri }}
    stats refresh {{ haproxy_stats_refresh }}
    stats realm HAProxy\ Statistics
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
    stats admin if TRUE

    # Health check endpoint
    http-request use-service prometheus-exporter if { path /metrics }
    monitor-uri /health

{% if haproxy_enable_prometheus %}
#---------------------------------------------------------------------
# Prometheus metrics
#---------------------------------------------------------------------
frontend prometheus
    bind *:{{ haproxy_prometheus_port }}
    http-request use-service prometheus-exporter if { path /metrics }
    no log
{% endif %}

#---------------------------------------------------------------------
# Frontend - HTTP
#---------------------------------------------------------------------
frontend http_front
    bind *:80
    mode http

    # Logging
{% if haproxy_enable_access_log %}
    option httplog
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"
{% endif %}

    # Custom headers
{% for header in haproxy_custom_headers %}
    http-response set-header {{ header }}
{% endfor %}

{% if haproxy_ssl_enabled and haproxy_ssl_redirect_http %}
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
{% endif %}

    # Rate limiting
{% if haproxy_enable_rate_limit %}
    stick-table type ip size 100k expire {{ haproxy_rate_limit_period }} store http_req_rate({{ haproxy_rate_limit_period }})
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt {{ haproxy_rate_limit_requests }} }
{% endif %}

    # ACLs and routing
    default_backend http_back

{% if haproxy_ssl_enabled %}
#---------------------------------------------------------------------
# Frontend - HTTPS
#---------------------------------------------------------------------
frontend https_front
    bind *:443 ssl crt {{ haproxy_ssl_certificate_path }}
    mode http

    # Custom headers
{% for header in haproxy_custom_headers %}
    http-response set-header {{ header }}
{% endfor %}

    # Add HSTS header
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

    default_backend http_back
{% endif %}

#---------------------------------------------------------------------
# Backend - Web servers
#---------------------------------------------------------------------
backend http_back
    mode http
    balance {{ haproxy_balance_algorithm }}

    # Health check
    option httpchk GET /
    http-check expect status 200

    # Backend options
    option forwardfor
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

{% if haproxy_backend_servers | length > 0 %}
    # Backend servers
{% for server in haproxy_backend_servers %}
    server {{ server.name }} {{ server.address }}:{{ server.port }}{% if server.check | default(true) %} check inter {{ haproxy_health_check_interval }} fall {{ haproxy_health_check_fall }} rise {{ haproxy_health_check_rise }}{% endif %}{% if server.backup | default(false) %} backup{% endif %}{% if haproxy_ssl_enabled %} ssl verify none{% endif %}

{% endfor %}
{% else %}
    # No backend servers configured
    # Add servers in group_vars/haproxy.yml
{% endif %}

#---------------------------------------------------------------------
# Additional frontends and backends
# Add custom configurations below
#---------------------------------------------------------------------

# Example: TCP load balancing for MySQL
# listen mysql_cluster
#     bind *:3306
#     mode tcp
#     balance leastconn
#     option mysql-check user haproxy
#     server mysql1 192.168.1.101:3306 check
#     server mysql2 192.168.1.102:3306 check backup

# Example: TCP load balancing for PostgreSQL
# listen postgres_cluster
#     bind *:5432
#     mode tcp
#     balance leastconn
#     option pgsql-check user haproxy
#     server pg1 192.168.1.101:5432 check
#     server pg2 192.168.1.102:5432 check backup
