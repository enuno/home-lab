---
# Monitoring and Logging Configuration

# ========================================
# System Logging Configuration
# ========================================

- name: Ensure rsyslog is installed and running
  ansible.builtin.apt:
    name: rsyslog
    state: present
  become: true

- name: Start and enable rsyslog
  ansible.builtin.systemd:
    name: rsyslog
    state: started
    enabled: true
  become: true

- name: Configure Tor logging
  ansible.builtin.blockinfile:
    path: /etc/rsyslog.d/30-tor.conf
    create: true
    owner: root
    group: root
    mode: '0644'
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Tor Logging"
    block: |
      # Tor logging configuration
      if $programname == 'tor' then /var/log/tor/tor.log
      & stop
  become: true
  notify: Restart rsyslog

- name: Configure log rotation for Tor
  ansible.builtin.copy:
    content: |
      /var/log/tor/*.log {
          daily
          rotate {{ tor_log_retention_days }}
          compress
          delaycompress
          missingok
          notifempty
          create 0640 {{ tor_user }} {{ tor_group }}
          sharedscripts
          postrotate
              systemctl reload tor > /dev/null 2>&1 || true
          endscript
      }
    dest: /etc/logrotate.d/tor
    owner: root
    group: root
    mode: '0644'
  become: true
  when: tor_enable_log_rotation | bool

# ========================================
# Prometheus Node Exporter
# ========================================

- name: Ensure Prometheus Node Exporter is installed
  ansible.builtin.apt:
    name: prometheus-node-exporter
    state: present
  become: true
  when: tor_enable_monitoring | bool

- name: Start and enable Prometheus Node Exporter
  ansible.builtin.systemd:
    name: prometheus-node-exporter
    state: started
    enabled: true
  become: true
  when: tor_enable_monitoring | bool

# ========================================
# Tor Metrics Exporter
# ========================================

- name: Install Tor Prometheus exporter dependencies
  ansible.builtin.pip:
    name:
      - prometheus-client
      - stem
    state: present
  become: true
  when: tor_enable_prometheus_exporter | bool

- name: Create Tor Prometheus exporter script
  ansible.builtin.copy:
    content: |
      #!/usr/bin/env python3
      """
      Tor Exit Node Prometheus Exporter
      Exports Tor relay metrics for Prometheus monitoring
      """
      import time
      import logging
      from prometheus_client import start_http_server, Gauge, Counter, Info
      from stem.control import Controller
      from stem import Signal

      # Metrics
      tor_traffic_read_bytes = Counter('tor_traffic_read_bytes_total', 'Total bytes read by Tor')
      tor_traffic_written_bytes = Counter('tor_traffic_written_bytes_total', 'Total bytes written by Tor')
      tor_connections = Gauge('tor_connections_current', 'Current number of connections')
      tor_uptime = Gauge('tor_uptime_seconds', 'Tor process uptime in seconds')
      tor_circuit_count = Gauge('tor_circuits_current', 'Current number of circuits')
      tor_info = Info('tor_relay', 'Tor relay information')

      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger(__name__)

      def collect_metrics():
          """Collect metrics from Tor control port"""
          try:
              with Controller.from_port(port={{ tor_control_port }}) as controller:
                  controller.authenticate()

                  # Get traffic statistics
                  traffic = controller.get_info('traffic/read', 'traffic/written')
                  tor_traffic_read_bytes._value.set(float(traffic.get('traffic/read', 0)))
                  tor_traffic_written_bytes._value.set(float(traffic.get('traffic/written', 0)))

                  # Get connection count
                  connections = len(list(controller.get_circuits()))
                  tor_connections.set(connections)

                  # Get uptime
                  uptime = controller.get_info('uptime')
                  tor_uptime.set(float(uptime) if uptime else 0)

                  # Get circuit count
                  circuits = len(list(controller.get_circuits()))
                  tor_circuit_count.set(circuits)

                  # Get relay info
                  try:
                      fingerprint = controller.get_info('fingerprint')
                      nickname = controller.get_conf('Nickname')
                      tor_info.info({
                          'nickname': nickname or 'unknown',
                          'fingerprint': fingerprint or 'unknown',
                          'version': controller.get_version().version_str
                      })
                  except Exception as e:
                      logger.warning(f"Could not get relay info: {e}")

          except Exception as e:
              logger.error(f"Error collecting metrics: {e}")

      if __name__ == '__main__':
          # Start Prometheus HTTP server
          start_http_server({{ tor_prometheus_exporter_port }})
          logger.info("Tor Prometheus exporter started on port {{ tor_prometheus_exporter_port }}")

          # Collect metrics every 15 seconds
          while True:
              collect_metrics()
              time.sleep(15)
    dest: /usr/local/bin/tor-prometheus-exporter.py
    owner: root
    group: root
    mode: '0755'
  become: true
  when: tor_enable_prometheus_exporter | bool

- name: Create systemd service for Tor Prometheus exporter
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Tor Prometheus Exporter
      After=tor.service
      Requires=tor.service

      [Service]
      Type=simple
      User={{ tor_user }}
      Group={{ tor_group }}
      ExecStart=/usr/local/bin/tor-prometheus-exporter.py
      Restart=on-failure
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/tor-prometheus-exporter.service
    owner: root
    group: root
    mode: '0644'
  become: true
  when: tor_enable_prometheus_exporter | bool
  notify:
    - Reload systemd
    - Restart prometheus-tor-exporter

- name: Start and enable Tor Prometheus exporter
  ansible.builtin.systemd:
    name: tor-prometheus-exporter
    state: started
    enabled: true
    daemon_reload: true
  become: true
  when: tor_enable_prometheus_exporter | bool
  failed_when: false

# ========================================
# Monitoring Scripts
# ========================================

- name: Create monitoring check script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Tor Exit Node Health Check Script

      set -euo pipefail

      # Colors for output
      RED='\033[0;31m'
      GREEN='\033[0;32m'
      YELLOW='\033[1;33m'
      NC='\033[0m' # No Color

      echo "========================================="
      echo "Tor Exit Node Health Check"
      echo "========================================="
      echo ""

      # Check Tor service status
      echo -n "Tor Service: "
      if systemctl is-active --quiet tor; then
          echo -e "${GREEN}Running${NC}"
      else
          echo -e "${RED}Stopped${NC}"
          exit 1
      fi

      # Check if Tor is listening on ORPort
      echo -n "ORPort {{ tor_or_port }}: "
      if ss -tuln | grep -q ":{{ tor_or_port }}"; then
          echo -e "${GREEN}Listening${NC}"
      else
          echo -e "${RED}Not listening${NC}"
      fi

      # Check DNS resolution
      echo -n "DNS Resolution: "
      if dig @127.0.0.1 torproject.org +short > /dev/null 2>&1; then
          echo -e "${GREEN}Working${NC}"
      else
          echo -e "${RED}Failed${NC}"
      fi

      # Check disk space
      echo -n "Disk Space: "
      DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
      if [ "$DISK_USAGE" -lt 80 ]; then
          echo -e "${GREEN}${DISK_USAGE}% used${NC}"
      elif [ "$DISK_USAGE" -lt 90 ]; then
          echo -e "${YELLOW}${DISK_USAGE}% used${NC}"
      else
          echo -e "${RED}${DISK_USAGE}% used - WARNING${NC}"
      fi

      # Check memory usage
      echo -n "Memory Usage: "
      MEM_USAGE=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
      if [ "$MEM_USAGE" -lt 80 ]; then
          echo -e "${GREEN}${MEM_USAGE}%${NC}"
      elif [ "$MEM_USAGE" -lt 90 ]; then
          echo -e "${YELLOW}${MEM_USAGE}%${NC}"
      else
          echo -e "${RED}${MEM_USAGE}% - WARNING${NC}"
      fi

      # Check load average
      echo -n "Load Average: "
      LOAD=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
      echo -e "${GREEN}${LOAD}${NC}"

      # Check connection count
      echo -n "Active Connections: "
      CONN_COUNT=$(ss -tan | grep ESTAB | wc -l)
      echo -e "${GREEN}${CONN_COUNT}${NC}"

      # Display relay fingerprint if available
      if [ -f {{ tor_data_dir }}/fingerprint ]; then
          echo ""
          echo "Relay Fingerprint:"
          cat {{ tor_data_dir }}/fingerprint
      fi

      echo ""
      echo "========================================="
      echo "Check complete at $(date)"
      echo "========================================="
    dest: /usr/local/bin/tor-health-check
    owner: root
    group: root
    mode: '0755'
  become: true

- name: Create cron job for health checks
  ansible.builtin.cron:
    name: "Tor health check"
    minute: "*/15"
    job: "/usr/local/bin/tor-health-check >> /var/log/tor/health-check.log 2>&1"
    user: root
  become: true

# ========================================
# Alert Configuration
# ========================================

- name: Create alert script
  ansible.builtin.template:
    src: tor-alert.sh.j2
    dest: /usr/local/bin/tor-alert
    owner: root
    group: root
    mode: '0755'
  become: true
  when: tor_enable_alerts | bool

- name: Display monitoring status
  ansible.builtin.debug:
    msg:
      - "Monitoring configuration complete"
      - "Node Exporter: {{ 'Enabled' if tor_enable_monitoring else 'Disabled' }}"
      - "Tor Metrics Exporter: {{ 'Enabled on port ' + (tor_prometheus_exporter_port | string) if tor_enable_prometheus_exporter else 'Disabled' }}"
      - "Health Check Script: /usr/local/bin/tor-health-check"
      - "Logs: /var/log/tor/"
