---
# System Prerequisites and Package Installation

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  become: true
  when: ansible_os_family == "Debian"

- name: Upgrade all packages to latest version
  ansible.builtin.apt:
    upgrade: dist
    autoremove: true
    autoclean: true
  become: true
  when: ansible_os_family == "Debian"
  register: apt_upgrade_result

- name: Check if reboot is required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Display reboot requirement notice
  ansible.builtin.debug:
    msg: "System reboot is required after package updates. Please reboot when convenient."
  when: reboot_required_file.stat.exists

- name: Install essential system packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - wget
      - git
      - htop
      - iotop
      - net-tools
      - dnsutils
      - tcpdump
      - ntp
      - ntpdate
      - vim
      - tmux
      - ufw
      - fail2ban
      - logrotate
      - rsyslog
      - python3
      - python3-pip
      - build-essential
    state: present
  become: true
  when: ansible_os_family == "Debian"

- name: Install monitoring packages
  ansible.builtin.apt:
    name:
      - prometheus-node-exporter
      - sysstat
      - iftop
      - nethogs
    state: present
  become: true
  when:
    - ansible_os_family == "Debian"
    - tor_enable_monitoring | bool

- name: Ensure NTP service is running
  ansible.builtin.systemd:
    name: ntp
    state: started
    enabled: true
  become: true
  ignore_errors: true

- name: Synchronize system time
  ansible.builtin.command: ntpdate -u pool.ntp.org
  become: true
  changed_when: false
  failed_when: false

- name: Set timezone to UTC (recommended for servers)
  ansible.builtin.timezone:
    name: UTC
  become: true

- name: Enable automatic security updates
  ansible.builtin.apt:
    name: unattended-upgrades
    state: present
  become: true
  when:
    - tor_enable_automatic_updates | bool
    - ansible_os_family == "Debian"

- name: Configure unattended-upgrades
  ansible.builtin.template:
    src: 50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - tor_enable_automatic_updates | bool
    - ansible_os_family == "Debian"

- name: Enable automatic updates configuration
  ansible.builtin.copy:
    content: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Download-Upgradeable-Packages "1";
      APT::Periodic::AutocleanInterval "7";
      APT::Periodic::Unattended-Upgrade "1";
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - tor_enable_automatic_updates | bool
    - ansible_os_family == "Debian"

- name: Create necessary directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  loop:
    - /etc/tor
    - /var/log/tor
    - /var/lib/tor
    - "{{ tor_backup_dir }}"

- name: Install Python packages for monitoring
  ansible.builtin.pip:
    name:
      - prometheus-client
      - psutil
    state: present
  become: true
  when: tor_enable_monitoring | bool

- name: Check system resources
  ansible.builtin.debug:
    msg:
      - "System Resources:"
      - "CPU Cores: {{ ansible_processor_vcpus }}"
      - "Memory: {{ ansible_memtotal_mb }} MB"
      - "Disk Space: {{ ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_total') | first | human_readable }}"

- name: Verify minimum system requirements
  ansible.builtin.assert:
    that:
      - ansible_memtotal_mb >= 1024
      - ansible_processor_vcpus >= 2
    fail_msg: "System does not meet minimum requirements (2 CPU cores, 1GB RAM)"
    success_msg: "System meets minimum requirements for Tor exit node"
